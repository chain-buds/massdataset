x[[2]]
})
names(ms2.info) <- ms1.info$name
###match variable_info and ms2 data
match.result <-
tinytools::mz_rt_match(
data1 = variable_info[, c(2, 3)],
data2 = ms1.info[, c(2, 3)],
mz.tol = ms1.ms2.match.mz.tol,
rt.tol = ms1.ms2.match.rt.tol,
rt.error.type = "abs"
)
if (is.null(match.result)){
cat(crayon::red("No variable are matched with MS2 spectra.\n"))
return(object)
}
if (nrow(match.result) == 0){
cat(crayon::red("No variable are matched with MS2 spectra.\n"))
return(object)
}
cat(crayon::green(
length(unique(match.result[, 1])),
"out of",
nrow(variable_info),
"variable have MS2 spectra.\n"
))
###if one peak matches multiple peaks, select the more reliable MS2 spectrum
cat(crayon::green("Selecting the most intense MS2 spectrum for each peak..."))
temp.idx <- unique(match.result[, 1])
match.result <-
lapply(temp.idx, function(idx) {
idx2 <- match.result[which(match.result[, 1] == idx), 2]
if (length(idx2) == 1) {
return(c(idx, idx2))
} else{
temp.ms2.info <- ms2.info[idx2]
return(c(idx, idx2[which.max(unlist(lapply(temp.ms2.info, function(y) {
y <- y[order(y[, 2], decreasing = TRUE), , drop = FALSE]
if (nrow(y) > 5)
y <- y[1:5,]
sum(y[, 2])
})))]))
}
})
match.result <- do.call(rbind, match.result) %>%
as.data.frame()
colnames(match.result) <- c("Index1", "Index2")
match.result <- data.frame(match.result,
variable_info$variable_id[match.result$Index1],
ms1.info$name[match.result$Index2],
stringsAsFactors = FALSE)
colnames(match.result) <-
c("Index1.ms1.data",
"Index.ms2.spectra",
"MS1.peak.name",
"MS2.spectra.name")
ms1.info <-
ms1.info[unique(match.result[, 2]), , drop = FALSE]
ms1.info
ms2.info <- ms2.info[unique(match.result[, 2])]
match.result$Index.ms2.spectra <-
match(match.result$MS2.spectra.name, ms1.info$name)
match.result$MS1.peak.name
match.result$MS2.spectra.name
source("~/tidymass/massdataset/R/ms2_data_class.R")
head(match.result)
ms1.info$name
ms1.info$name[match.result$Index.ms2.spectra]
ms1.info$name[match.result$Index.ms2.spectra] == match.result$MS2.spectra.name
ms1.info$file[match.result$Index.ms2.spectra]
###add MS2 to object
ms2_data =
new(Class = "ms2_data",
column = column,
polarity = polarity,
variable_id = match.result$MS1.peak.name,
ms2_spectrum_id = match.result$MS2.spectra.name,
ms2_mz = ms1.info$mz[match.result$Index.ms2.spectra],
ms2_rt = ms1.info$rt[match.result$Index.ms2.spectra],
ms2_file = ms1.info$file[match.result$Index.ms2.spectra],
ms2_spectra = ms2.info[match.result$Index.ms2.spectra],
mz_tol = ms1.ms2.match.mz.tol,
rt_tol = ms1.ms2.match.rt.tol)
column
column = "rp"
polarity
polarity = "positive"
###add MS2 to object
ms2_data =
new(Class = "ms2_data",
column = column,
polarity = polarity,
variable_id = match.result$MS1.peak.name,
ms2_spectrum_id = match.result$MS2.spectra.name,
ms2_mz = ms1.info$mz[match.result$Index.ms2.spectra],
ms2_rt = ms1.info$rt[match.result$Index.ms2.spectra],
ms2_file = ms1.info$file[match.result$Index.ms2.spectra],
ms2_spectra = ms2.info[match.result$Index.ms2.spectra],
mz_tol = ms1.ms2.match.mz.tol,
rt_tol = ms1.ms2.match.rt.tol)
ms2_data
source("~/tidymass/massdataset/R/mutate_ms2.R")
source("~/tidymass/massdataset/R/mutate_ms2.R")
data("expression_data")
data("sample_info")
data("variable_info")
library(massdataset)
object =
create_mass_dataset(
expression_data = expression_data,
sample_info = sample_info,
variable_info = variable_info,
)
object
dir.create("demo_data")
system.file("ms2_data", package = "metid")
file.copy(file.path(system.file("ms2_data", package = "massdataset"), "QC_MS2_NCE25_1.mgf"),
to = "demo_data", overwrite = TRUE)
object =
mutate_ms2(object = object, column = "rp", polarity = "positive")
object@ms2_data
source("~/tidymass/massdataset/R/mutate_ms2.R")
dir.create("demo_data")
system.file("ms2_data", package = "metid")
file.copy(file.path(system.file("ms2_data", package = "massdataset"), "QC_MS2_NCE25_1.mgf"),
to = "demo_data", overwrite = TRUE)
object =
create_mass_dataset(
expression_data = expression_data,
sample_info = sample_info,
variable_info = variable_info,
)
object
dir.create("demo_data")
system.file("ms2_data", package = "metid")
file.copy(file.path(system.file("ms2_data", package = "massdataset"), "QC_MS2_NCE25_1.mgf"),
to = "demo_data", overwrite = TRUE)
object =
mutate_ms2(object = object, column = "rp", polarity = "positive")
object@ms2_data
source("~/tidymass/massdataset/R/mutate_ms2.R")
getwd()
devtools::document()
source("~/tidymass/massdataset/R/ms2_data_class.R")
object
devtools::document()
devtools::build()
devtools::check()
devtools::document()
devtools::build()
devtools::check()
object@ms2_data
object@ms2_data %>% names
name
name = paste(sort(ms2_data_name), collapse = ";")
name
any(names(object@ms2_data) == name)
match(name, names(ms2_data))
names(ms2_data)
match(name, names(object@ms2_data))
object@ms2_data[[match(name, names(object@ms2_data))]]
object@ms2_data[[match(name, names(object@ms2_data))]] = ms2_data
devtools::document()
devtools::build
devtools::build()
data.frame()
source("~/tidymass/massdataset/R/mass_dataset_class.R")
#' @author Xiaotao Shen
#' \email{shenxt@@sioc.ac.cn}
#' @param expression_data MS1 peak table name. Columns are samples and rows are variables.
#' @param sample_info Sample information name.
#' @param variable_info MS1 peak table name. Columns are samples and rows are variables.
#' @param sample_info_note Sample information name.
#' @param variable_info_note Sample information name.
#' @return A mass_dataset-class object.
#' @export
#' @examples
data("expression_data")
data("sample_info")
data("sample_info_note")
data("variable_info")
data("variable_info_note")
object =
create_mass_dataset(
expression_data = expression_data,
sample_info = sample_info,
variable_info = variable_info,
sample_info_note = sample_info_note,
variable_info_note = variable_info_note
)
object
object@annotation_table
source("~/tidymass/massdataset/R/mass_dataset_class.R")
getwd()
devtools::document()
devtools::build()
source("~/tidymass/massdataset/R/mass_dataset_class.R")
devtools::document()
devtools::build()
devtools::check()
variable_info = object@variable_info %>%
as.data.frame()
nrow(object@annotation_table) != 0
object@annotation_table %>%
dplyr::select(-c(ms2_files_id:ms2_spectrum_id))
devtools::document()
devtools::build()
devtools::check()
devtools::document()
devtools::build()
devtools::check()
devtools::document()
devtools::build()
devtools::check()
devtools::document()
devtools::build()
devtools::check()
source("~/tidymass/massdataset/R/conflicts.R")
devtools::document()
devtools::build()
devtools::document()
devtools::build()
devtools::check()
devtools::document()
devtools::build()
devtools::document()
devtools::build()
devtools::document()
devtools::build()
devtools::check()
devtools::document()
devtools::document()
devtools::build()
devtools::check()
pkgdown::build_site()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(tinytools)
library(tinytools)
source("~/tidymass/massdataset/R/tinytools_mz_rt_match.R")
devtools::document()
devtools::build()
devtools::check()
devtools::document()
devtools::document()
devtools::build()
devtools::check()
devtools::document()
devtools::build()
devtools::check()
pkgdown::build_site()
getwd()
setwd("vignettes/")
library(massdataset)
library(tidyverse)
library(tidyverse)
data("expression_data")
data("sample_info")
data("variable_info")
data("variable_info_note")
object =
create_mass_dataset(
expression_data = expression_data,
sample_info = sample_info,
variable_info = variable_info,
sample_info_note = sample_info_note,
variable_info_note = variable_info_note
)
object
###MS2 data (mgf data)
dir.create("demo_data")
file.copy(
system.file("ms2_data", package = "massdataset"),
to = "demo_data",
overwrite = TRUE,
recursive = TRUE
)
object2 =
mutate_ms2(
object = object,
column = "rp",
polarity = "positive",
ms1.ms2.match.mz.tol = 10,
ms1.ms2.match.rt.tol = 15,
path = "demo_data"
)
setwd("..")
pkgdown::build_site()
devtools::install_github("tidymass/tinytools")
getwd()
devtools::document()
devtools::build()
devtools::check()
devtools::document()
devtools::build()
devtools::check()
devtools::install_github("tidymass/tinytools")
devtools::document()
devtools::build()
devtools::check()
pkgdown::build_site()
devtools::document()
devtools::build()
devtools::check()
devtools::document()
devtools::build()
devtools::check()
devtools::document()
devtools::build()
devtools::check()
devtools::document()
devtools::build()
tinytools::openwd()
BiocCheck::BiocCheck()
seq_along(5)
seq_along(c("a","b"))
x
nrow(x)
ncol(x)
seq_len(ncol(x))
seq_len(10)
seq_along(5)
seq_len(5)
devtools::document()
devtools::build()
devtools::check()
source("~/tidymass/massdataset/R/mutate_sample_na_number.R")
#' @description Add NA frequency for each sample to sample_info
#' @author Xiaotao Shen
#' \email{shenxt1990@@outlook.com}
#' @param object (required) mass_dataset class object.
#' @param according_to_variables (required) What variables used to filter variables.
#' Default is "all". If you
#' want to use only several variables, provide their names as a vector.
#' @return A mass_dataset class object
#' @export
#' @examples
library(massdataset)
data("expression_data")
data("sample_info")
data("sample_info")
object =
create_mass_dataset(
expression_data = expression_data,
sample_info = sample_info,
variable_info = variable_info
)
object
data("expression_data")
data("sample_info")
data("sample_info")
object =
create_mass_dataset(
expression_data = expression_data,
sample_info = sample_info,
variable_info = variable_info
)
object
##calculate NA frequency according to all the variables
object2 =
mutate_sample_na_freq(object = object)
head(extract_sample_info(object))
head(extract_sample_info(object2))
##calculate NA frequency according to only variables with mz > 100
variable_id =
object2 %>%
activate_mass_dataset(what = "variable_info") %>%
filter(mz > 100) %>%
pull(variable_id)
object3 =
mutate_sample_na_freq(object = object2,
according_to_variables = variable_id)
object3
head(extract_sample_info(object3))
devtools::document()
devtools::build()
devtools::check()
devtools::document()
devtools::build()
devtools::check()
devtools::document()
devtools::build()
devtools::check()
library(ggplot2)
library(tidyverse)
library(plyr)
devtools::document()
devtools::build()
devtools::check()
devtools::document()
devtools::build()
devtools::check()
BiocCheck::BiocCheck()
source("~/tidymass/massdataset/R/data_checking.R")
check_object_class(c(1:5), "mass_dataset)
)
""
"
check_object_class(c(1:5), "mass_dataset")
devtools::document()
devtools::build()
devtools::check()
data("expression_data")
data("sample_info")
data("variable_info")
object =
create_mass_dataset(
expression_data = expression_data,
sample_info = sample_info,
variable_info = variable_info,
)
check_object_class(object, "mass_dataset")
devtools::document()
devtools::build()
devtools::check()
BiocCheck::BiocCheck()
devtools::document()
devtools::build()
devtools::check()
BiocCheck::BiocCheck()
library(usethis)
usethis::use_testthat()
use_test()
getwd()
use_test()
usethis::use_testthat()
use_test()
setwd("R")
use_test()
setwd("..")
getwd()
use_test(name = "get_mv_number")
data("expression_data")
data("sample_info")
data("variable_info")
object =
create_mass_dataset(
expression_data = expression_data,
sample_info = sample_info,
variable_info = variable_info,
)
object =
create_mass_dataset(
expression_data = expression_data,
sample_info = sample_info,
variable_info = variable_info,
)
object
get_mv_number(object)
expect_equal(get_mv_number(object), 3829)
devtools::document()
devtools::build()
devtools::check()
data("expression_data")
data("sample_info")
data("variable_info")
expression_data
dim(expression_data)
object =
create_mass_dataset(
expression_data = expression_data,
sample_info = sample_info,
variable_info = variable_info,
)
expect_equal(get_mv_number(object), 3829)
?expect_equal
testthat::expect_equal(get_mv_number(object), 3829)
testthat::expect_equal(get_mv_number(object), 3822)
devtools::document()
devtools::build()
devtools::check()
data("expression_data")
class(expression_data)
data("expression_data", package = "massdataset")
data("sample_info", package = "massdataset")
data("variable_info", package = "massdataset")
object =
create_mass_dataset(
expression_data = expression_data,
sample_info = sample_info,
variable_info = variable_info,
)
testthat::expect_equal(get_mv_number(object), 3829)
devtools::document()
devtools::build()
devtools::check()
data("expression_data", package = "massdataset")
class(expression_data)
source("~/tidymass/massdataset/R/massdataset_logo.R")
get_massdataset_version()
source("~/tidymass/massdataset/R/massdataset_logo.R")
testthat::expect_equal(get_massdataset_version(), "0.99.1")
devtools::document()
devtools::build()
devtools::check()
BiocCheck::BiocCheck()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_home()
pkgdown::build_news()
usethis::use_news_md()
pkgdown::build_news()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
getwd()
